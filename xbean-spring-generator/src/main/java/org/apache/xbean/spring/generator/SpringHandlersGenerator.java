/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.xbean.spring.generator;

import org.apache.xbean.generator.ArtifactSet;
import org.apache.xbean.generator.GeneratorPlugin;
import org.apache.xbean.generator.LogFacade;
import org.apache.xbean.model.mapping.NamespaceMapping;
import org.apache.xbean.generator.artifact.SimpleArtifact;

import java.io.*;
import java.util.Collections;
import java.util.Map;
import java.util.Properties;

public class SpringHandlersGenerator implements GeneratorPlugin {

    private final String namespaceHandler;
    private final File destFile;
    private final ArtifactSet artifactSet;
    private final LogFacade logFacade;

    public SpringHandlersGenerator(String namespaceHandler, File destination, ArtifactSet artifactSet, LogFacade logFacade) {
        this.namespaceHandler = namespaceHandler;
        this.destFile = destination;
        this.artifactSet = artifactSet;
        this.logFacade = logFacade;
    }

    public void generate(NamespaceMapping namespaceMapping, Map<String, String> configuration) throws IOException {
        String namespace = namespaceMapping.getNamespace();
        if (namespace == null) {
            return;
        }

        // Generate spring 2.0 mapping
        File file = new File(destFile, "META-INF/spring.handlers");

        Properties properties = new Properties();
        if (!file.exists()) {
            logFacade.log("Generating Spring 2.0 handler mapping: " + file + " for namespace: " + namespace);
        } else {
            logFacade.log("Updating Spring 2.0 handler mapping: " + file + " for namespace: " + namespace);

            // read in current file
            InputStream in = new FileInputStream(file);
            try {
                properties.load(in);
            } catch (IOException e) {
                in.close();
            }
        }

        // register property
        properties.put(namespace, namespaceHandler);

        // write properties
        OutputStream fout = new FileOutputStream(file);
        try {
            properties.store(fout, "Generated by xbean-spring");
            artifactSet.register(new SimpleArtifact(file, false, Collections.singletonMap("type", "spring.handlers")));
        } finally {
            fout.close();
        }
    }

    public LogFacade getLog() {
        return logFacade;
    }

    public void setLog(LogFacade log) {

    }

}
