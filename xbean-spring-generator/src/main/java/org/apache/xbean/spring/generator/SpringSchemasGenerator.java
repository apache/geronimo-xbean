package org.apache.xbean.spring.generator;

import org.apache.xbean.generator.*;
import org.apache.xbean.generator.artifact.SimpleArtifact;
import org.apache.xbean.model.mapping.NamespaceMapping;

import java.io.*;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

public class SpringSchemasGenerator implements GeneratorPlugin {

    private final File destFile;
    private final ArtifactSet artifactSet;
    private final LogFacade logFacade;

    public SpringSchemasGenerator(File destination, ArtifactSet artifactSet, LogFacade logFacade) {
        this.destFile = destination;
        this.artifactSet = artifactSet;
        this.logFacade = logFacade;
    }

    public void generate(NamespaceMapping namespaceMapping, Map<String, String> configuration) throws IOException {
        String namespace = namespaceMapping.getNamespace();
        if (namespace == null) {
            return;
        }

        Optional<Artifact> artifact = artifactSet.find("type", "xsd");
        if (artifact.isPresent()) {
            generateSchemasFile(artifact.get(), namespace);
        } else {
            logFacade.log("Couldn't find a schema in execution chain, skipping spring.schemas generation.");
        }
    }

    private void generateSchemasFile(Artifact artifact, String namespace) throws IOException {
        String schemaName = artifact.getLocation().getName();

        File file = new File(destFile, "META-INF/spring.schemas");

        Properties properties = new Properties();
        if (!file.exists()) {
            logFacade.log("Generating Spring 2.0 schema mapping: " + file + " for namespace: " + namespace);
        } else {
            logFacade.log("Updating Spring 2.0 schema mapping: " + file + " for namespace: " + namespace);

            // read in current file
            InputStream in = new FileInputStream(file);
            try {
                properties.load(in);
            } catch (IOException e) {
                in.close();
            }
        }

        String uri = calculateSchemaLocation(namespace, schemaName);

        // Starting from later releases of spring schemas are read from classpath and schemas generated by xsd plugin
        // are located in root directory thus we have to start from slash
        properties.put(uri, "/" + schemaName);

        // write properties
        OutputStream fout = new FileOutputStream(file);
        try {
            properties.store(fout, "Generated by xbean-spring");
            artifactSet.register(new SimpleArtifact(file, false, Collections.singletonMap("type", "spring.schemas")));
        } finally {
            fout.close();
        }
    }

    /**
     * A helper method to handle normalisation of schema URIs and expected mappings of these to schema locations.
     *
     * If given namespace ends with / then we append output schema name, otherwise - if schema ends with a string then
     * we just append .xsd extension.
     * This method is just tries to establish some convention on how schema names are generated. Users are free to omit
     * it and use own schema mappings without generator.
     *
     * @param namespace Namespace URI.
     * @param schemaName Schema file name.
     * @return Expected schema location.
     */
    private String calculateSchemaLocation(String namespace, String schemaName) {
        if (!namespace.endsWith("/")) {
            return namespace + ".xsd";
        }
        return namespace  +schemaName + ".xsd";
    }

    public LogFacade getLog() {
        return logFacade;
    }

    public void setLog(LogFacade log) {

    }

}
